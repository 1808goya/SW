#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<windows.h>
#include<time.h>
#include<conio.h>
#include <mmsystem.h>
#include <tchar.h>
#pragma comment(lib, "winmm.lib")




// -------------------------------------------------------- 전역 변수들

int isgravity = 0;
int currentKeywords[8]; // 현재 스테이지에 있는 키워드들
int c_stage = 0; // 현재 스테이지 레벨
int start_arr[4][2] = { //캐릭터 시작 위치
	{20, 68},
	{1,13},
	{1, 68},
	{1, 22}
};
char text_arr[][3][2] = { //스테이지별 텍스트 배열
	{
	{8, -100},
	{-1, -100},
	},

	{
	{8, -100},
	{-1, -100}
	},

	{
	{8,-100},
	{ 10, -100 },
	{7, -100},
	}
	,
	{
	{8,-100},
	{ -1, -100 },
	}
};
int keywords[8][8] = { // 8개의 스테이지에 대한 8개의 키워드들(스테이지 초기화 시 불러옴)
{ -100, 0, 0, 0, 0, 0, 0, 0 },
{ -100, 0, 0, 0, 0, 0, 0, 0 },
{ -100, 0, 0, 0, 0, 0, 0, 0 },
{ -100, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0 }
};
int c_time = 0;
int c_score = 0;


clock_t start_time;
clock_t pre_time;


// ----------------------------------------------------------  구조체 선언
typedef struct Textline { // 핵심 컨셉인 키워드 교체 구조체. A is B의 형태로 이루어져 있고,앞서 stageinfo는 int형식의 배열이므로
	// A는 int형식, B는 키워드이므로 char형식(추후 편의성을 위해 int형식으로의 변경도 가능)으로 표현

	int element; // A is B에서의 A, 키워드가 적용될 요소

	int keyword; // A is B에서의 B, 효과를 가진 키워드

}textline;

typedef struct pixel { // 요구사항명세서에 따라, 각 칸의 데이터는 [원래 코드, 변화할 수 있는 코드]의 쌍으로 저장되어야 함.

	int n1; // 초기 코드
	int n2; // 임시 변화 코드, 캐릭터나 아이템이 해당 칸에 위치하는 경우 n2가 변화함.
	int n3; //현재 코드, draw에서 n2와 비교 후 수정
	int n4; //일단은 블럭 통과시 지워지는 문제 해결용 변수 그냥 좌표상 문제 생기면 저장하는 변수로 앞으로 쓰면 될듯
	int isSolid;

	int mod; // 발사하는 함정 등 한 블럭이 여러 속성(발사하는 함정에서는 투사체 방향) 을 가져야 할 때 쓰는 변수. 이외에는 무시해도 됨

	// 기본적으로 drawStage에서 n2와 n3을 비교하여 스테이지를 그림.

}pixel;

typedef struct Stage { // 스테이지 구조체

	int x; // 스테이지 가로 길이
	int y; // 스테이지 세로 길이
	pixel** stageinfo; // 스테이지 정보

	int NumofLines; // 한 스테이지에 사용가능한 문장(키워드 조합)의 개수

	int clearstar; //클리어에 필요한 스타의 갯수

	textline Textlines[10];


}Stage;

typedef struct inter { // 전체 인터페이스 구조체

	Stage S;
	Stage TextInterface;
	Stage TextStored;
	Stage ShopInterface;

}inter;

typedef struct item {

	char itemname; // 아이템 이름이자 기호
	int quantity; // 보유 갯수

}item;
// -------------------------------------------------------- 전역 변수 2(아이템 구조체때문에 내림)
item items[10]; // 아이템 보관함

// ---------------------------------------------------------------- 공통 함수

void textcolor(int colorNum) { // 글자색 변경
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), colorNum);



	/*
	* 글자색 목록
	BLACK,   //0
	darkBLUE, //1
	Dark Green, //2
	darkSkyBlue,    //3
	DarkRed,   //4
	DarkPurple, //5
	DarkYellow, //6
	GRAY, //7
	DarkGray, //8
	BLUE, //9
	GREEN, //10
	SkyBlue, //11
	RED, //12
	PURPLE, //13
	YELLOW, //14
	WHITE //15
	*/
};




// ---------------------------------------------------------------- 스테이지 생성/관리

pixel** makeStageinfo(int x, int y) { // 가로 x, 세로 y크기의 바운더리만 있는 스테이지 생성

	//스테이지 크기 동적할당 받아 생성하기

	pixel** Stageinfo = (pixel**)malloc(sizeof(pixel*) * y);
	if (Stageinfo == NULL) {
		printf("할당오류");
		return 0;
	}
	for (int i = 0; i < y; i++) {
		Stageinfo[i] = (pixel*)malloc(sizeof(pixel) * x);
		if (Stageinfo[i] == NULL) {
			printf("할당오류");
			return 0;
		}
	}

	// 스테이지 정보를 0으로 초기화
	for (int i = 0; i < y; i++) {

		for (int j = 0; j < x; j++) {
			Stageinfo[i][j].n1 = 0;
			Stageinfo[i][j].n2 = 0;
			Stageinfo[i][j].n3 = 0;
			Stageinfo[i][j].n4 = 0;
			Stageinfo[i][j].isSolid = 0;
		}

	}


	// 스테이지의 바운더리 생성해주기

	for (int j = 0; j < x; j++) { // 바운더리 위쪽
		Stageinfo[0][j].n1 = 2;
	}

	for (int j = 0; j < x; j++) { // 바운더리 아래쪽
		Stageinfo[y - 1][j].n1 = 2;
	}

	for (int j = 0; j < y; j++) { // 바운더리 왼쪽
		Stageinfo[j][0].n1 = 1;
	}
	for (int j = 0; j < y; j++) { // 바운더리 오른쪽
		Stageinfo[j][x - 1].n1 = 1;
	}


	// 각 모서리
	Stageinfo[0][0].n1 = 3;
	Stageinfo[0][x - 1].n1 = 4;
	Stageinfo[y - 1][0].n1 = 5;
	Stageinfo[y - 1][x - 1].n1 = 6;


	return Stageinfo;

}

void stageReset(Stage S) { // 각 픽셀(그리드)를 정의하는 코드 n1(기본)과 n2(변화가능)을 일치시켜 스테이지를 초기화하는 함수
	for (int i = 0; i < S.y; i++) {
		for (int j = 0; j < S.x; j++) {
			S.stageinfo[i][j].n2 = S.stageinfo[i][j].n1;
		}
	}
}

Stage makeStage(int x, int y) { // 가로 x, 세로 y의 스테이지를 생성하고, 스테이지 정보를 만든 다음, n1과 n2를 일치시켜 초기화해주고 스테이지를 반환하는 함수

	Stage S; //  스테이지 생성
	S.stageinfo = makeStageinfo(x, y); // 스테이지 정보 생성
	S.x = x;
	S.y = y;

	stageReset(S);

	return S;

}

void setCursorPosition(int x, int y)//입력받은 좌표로 커서 위치를 변경
{

	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD pos;
	pos.X = x;
	pos.Y = y;

	SetConsoleCursorPosition(hConsole, pos);

	return;
}

void ALL_drawStage(Stage S, int x, int y) { // x,y 좌표에 스테이지 생성


	for (int i = 0; i < S.y; i++)
		for (int j = 0; j < S.x; j++)
		{
			{
				if ((S.stageinfo[i][j].n2) == 0)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("  ");
				}
				if ((S.stageinfo[i][j].n2) == 1)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("│");
				}
				if ((S.stageinfo[i][j].n2) == 2)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("─");
				}
				if ((S.stageinfo[i][j].n2) == 3)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("┏");
				}
				if ((S.stageinfo[i][j].n2) == 4)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("┓");
				}
				if ((S.stageinfo[i][j].n2) == 5)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("└");
				}
				if ((S.stageinfo[i][j].n2) == 6)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("┘");
				}
				if ((S.stageinfo[i][j].n2) == 7)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("○");
				}
				if ((S.stageinfo[i][j].n2) == 8)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("■");
				}
				if ((S.stageinfo[i][j].n2) == 9)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("◇");
				}
				if ((S.stageinfo[i][j].n2) == 10) // 발사체 함정
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(10);
					printf("※");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == 11) // 파란 블럭 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9); // 파란색
					printf("■");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == 12) // 빨간 블럭 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12); // 빨간색
					printf("■");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == 13)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(10); // 초록색
					printf("◆");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == 14) //푸른 가시 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9);
					printf("▲");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == 15) //빨간 가시 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12);
					printf("▲");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == 16) //기본 가시 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("▲");
				}
				if ((S.stageinfo[i][j].n2) == 17) // 발사체 함정
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("※");
				}
				//기본적으로 통과 가능한 것들
				if ((S.stageinfo[i][j].n2) == -1)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(14); // 노란색
					printf("★");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -2)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(14); // 노란색
					printf("☆");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -3)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(6);
					printf("⊙"); //보너스
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -8)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("▤"); //맵이동 문(아직 미구현)
				}
				if ((S.stageinfo[i][j].n2) == -11) // 파란 블럭 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9); // 파란색
					printf("□");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -12) // 빨간 블럭 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12); // 빨간색
					printf("□");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -14) //푸른 가시 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9);
					printf("△");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -15) //빨간 가시 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12);
					printf("△");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -100) //키워드 - STOP
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("ST");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -101) //키워드 - PASS
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("PS");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -102) //키워드 - FALL
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("FA");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -103) //키워드 - SWITCH
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("SW");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -104) //키워드 - float
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("FL");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -105) //키워드 - float
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("PU");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -201) //아이템 - 중력을 왼쪽으로
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("☜");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -301) // 오른쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(13);
					printf("⊃");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -302) // 왼쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(13);
					printf("⊂");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -303) // 위쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("∩");
				}
				if ((S.stageinfo[i][j].n2) == -304) // 아래쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("∪");
				}
			}
		}

	return;
}

void drawStage(Stage S, int x, int y) { // x,y 좌표에 스테이지 생성


	for (int i = 0; i < S.y; i++)
		for (int j = 0; j < S.x; j++)
		{
			if (S.stageinfo[i][j].n2 != S.stageinfo[i][j].n3) {
				if ((S.stageinfo[i][j].n2) == 0)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("  ");
				}
				if ((S.stageinfo[i][j].n2) == 1)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("│");
				}
				if ((S.stageinfo[i][j].n2) == 2)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("─");
				}
				if ((S.stageinfo[i][j].n2) == 3)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("┏");
				}
				if ((S.stageinfo[i][j].n2) == 4)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("┓");
				}
				if ((S.stageinfo[i][j].n2) == 5)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("└");
				}
				if ((S.stageinfo[i][j].n2) == 6)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("┘");
				}
				if ((S.stageinfo[i][j].n2) == 7)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("○");
				}
				if ((S.stageinfo[i][j].n2) == 8)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("■");
				}
				if ((S.stageinfo[i][j].n2) == 9)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("◇");
				}
				if ((S.stageinfo[i][j].n2) == 10) // 발사체 함정
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(10);
					printf("※");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == 11) // 파란 블럭 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9); // 파란색
					printf("■");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == 12) // 빨간 블럭 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12); // 빨간색
					printf("■");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == 13)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(10); // 초록색
					printf("◆");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == 14) //푸른 가시 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9);
					printf("▲");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == 15) //빨간 가시 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12);
					printf("▲");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == 16) //기본 가시 - 채워짐
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("▲");
				}
				if ((S.stageinfo[i][j].n2) == 17) // 발사체 함정 - 바꾸지 못함
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("※");
				}
				//기본적으로 통과 가능한 것들
				if ((S.stageinfo[i][j].n2) == -1)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(14); // 노란색
					printf("★");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -2)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(14); // 노란색
					printf("☆");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -3)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(6);
					printf("⊙"); //보너스
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -8)
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					printf("▤"); //맵이동 문(아직 미구현)
				}
				if ((S.stageinfo[i][j].n2) == -11) // 파란 블럭 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9); // 파란색
					printf("□");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -12) // 빨간 블럭 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12); // 빨간색
					printf("□");
					textcolor(15); // 다시 하얀색으로
				}
				if ((S.stageinfo[i][j].n2) == -14) //푸른 가시 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(9);
					printf("△");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -15) //빨간 가시 - 비었음
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(12);
					printf("△");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -100) //키워드 - STOP
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("ST");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -101) //키워드 - PASS
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("PS");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -102) //키워드 - FALL
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("FA");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -103) //키워드 - SWITCH
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("SW");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -104) //키워드 - FLOAT
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("FL");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -105) //키워드 - PUSH
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("PU");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -201) //아이템 - 중력을 왼쪽으로
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(11);
					printf("☜");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -301) // 오른쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(13);
					printf("⊃");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -302) // 왼쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(13);
					printf("⊂");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -303) // 위쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(13);
					printf("∩");
					textcolor(15);
				}
				if ((S.stageinfo[i][j].n2) == -304) // 아래쪽으로 발사되는 투사체
				{
					S.stageinfo[i][j].n3 = S.stageinfo[i][j].n2;
					setCursorPosition(2 * (j + x), i + y);
					textcolor(13);
					printf("∪");
					textcolor(15);
				}
			}
		}

	return;
}

void All_erase() { //모든 스테이지 지우기


	for (int i = 0; i < 70; i++) {
		for (int j = 0; j < 60; j++) {
			setCursorPosition(2 * j, i);
			printf("  ");
		}
	}

	return;
}

int isSolid(Stage S, int x, int y) { // 통과 가능한 벽이면 0, 아니면 1을 return

	if ((S.stageinfo[y][x].n3) == 1) {
		return 1;
	}


	return 0;
}

void getinfo(Stage* S, int arr[][40], int x, int y) { // int형식의 이중 배열을 불러와 Stageinfo에 저장하는 함수
	for (int i = 0; i < y; i++) {
		for (int j = 0; j < x; j++) {
			S->stageinfo[i][j].n1 = arr[i][j];
			S->stageinfo[i][j].n2 = arr[i][j];
			S->stageinfo[i][j].n3 = 999;
			S->stageinfo[i][j].n4 = 0;

			// isSolid(해당 칸이 캐릭터와 충돌하는지) 수정 . 기본적으로는 0(빈칸)일 경우만 충돌을 0(없음)으로
			if (arr[i][j] <= 0) {
				S->stageinfo[i][j].isSolid = 0;
			}
			else {
				S->stageinfo[i][j].isSolid = 1;
			}
		}
	}
}


//////////////////////////////////////////  [[[  STAGE INFOS  ]]]  ////////////////////////////////////////////

int stageinfos[][60][40] = { // int 3중배열에 저장한 각 스테이지 정보들
{
{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,-1,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,-3,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,-12,0,0,0,0,0,14,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,8,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,-12,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,8,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,-12,-201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-15,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,-12,-12,-12,-12,0,0,0,0,0,0,0,0,0,-12,-12,-12,-12,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-102,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,-12,-12,-12,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6}
},
{
{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,8,8,8,8,8,8,8,8,8,8,11,11,11,11,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,1},
		{1,-105,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,10,1},
		{1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,8,8,8,8,8,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,-102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,10,1},
		{1,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,1}, // x=35 y = 23
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1}, // x = 17 = y = 31
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,1}, // y = 38 x = 35
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1}, // y = 45 x = 17
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,0,0,0,0,0,1},
		{1,16,-104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,1},
		{5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6}
},
{
		{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,8,0,-1,0,8,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,-12,-12,-12,0,0,0,-1,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, // 55, 39
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,-104,-102,-103,-105,12,12,12,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6}
},
{
	{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4},
		{1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,-105,11,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-104,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,-12,-12,-12,-12,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,1},
		{5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6}
},
{}
};

void initStage(inter* S, int i) { //스테이지, 인터페이스 포함 초기화
	S->S = makeStage(40, 60);
	S->TextInterface = makeStage(40, 10);
	S->TextStored = makeStage(20, 10);
	S->ShopInterface = makeStage(20, 60);

	getinfo(&S->S, stageinfos[i], 40, 60);
	S->S.NumofLines = 2;
	S->S.clearstar = 2;
	S->S.Textlines[0].element = text_arr[i][0][0];
	S->S.Textlines[0].keyword = text_arr[i][0][1];

	S->S.Textlines[1].element = text_arr[i][1][0];
	S->S.Textlines[1].keyword = text_arr[i][1][1];

	S->S.Textlines[2].element = text_arr[i][2][0];
	S->S.Textlines[2].keyword = text_arr[i][2][1];


}

//////////////////////////////////////////  [[[  STAGE INFOS  ]]]  ////////////////////////////////////////////




// ----------------------------------------------- 키워드 교체

void addkeyword(int i, int key) { // 키워드 획득시 보유 키워드 칸에 추가

	currentKeywords[i] = key;
	return;
}

void keyWordindicator() { // 가진 키워드 표시
	textcolor(15);
	for (int i = 0; i < 8; i++) {
		setCursorPosition(82, 1 + i);
		printf("                   "); // 지워주기
		setCursorPosition(82, 1 + i);
		printf("Num%d : ", i + 1);
		if (currentKeywords[i] == 0) { // 빈칸은 '0'
			printf("    ");
		}
		if (currentKeywords[i] == -100) {
			printf("STOP");
		}
		if (currentKeywords[i] == -101) {
			printf("PASS");
		}
		if (currentKeywords[i] == -102) {
			printf("FALL");
		}
		if (currentKeywords[i] == -103) {
			printf("SWITCH");
		}
		if (currentKeywords[i] == -104) {
			printf("FLOAT");
		}
		if (currentKeywords[i] == -105) {
			printf("PUSH");
		}

	}
}

void Changetext(Stage S, int oldtext, int newtext) {
	for (int i = 0; i < 60; i++) {
		for (int j = 0; j < 40; j++) {
			if (S.stageinfo[i][j].n3 == oldtext) {
				S.stageinfo[i][j].n3 = newtext;
			}
		}
	}
}

int TextMatrix[][2] = { // 키워드를 선택할 때, 커서의 위치를 표현하는 정보
{0,0},
{0,0},
{0,0},
{0,0},
{0,0},
{0,0},
{0,0},
{0,0},
};

void indicateTextline(Stage S, int M[][2]) { // 키워드 교체 인터페이스

	for (int i = 0; i < S.NumofLines; i++) { // 문장의 개수만큼 출력

		setCursorPosition(2, 1 + i); // 커서 위치 조정해주고
		printf("                                                       "); // 지워준 후
		setCursorPosition(2, 1 + i); // 커서 위치 재조정


		if (M[i][0] == 1 || M[i][1] == 1) { // 대상 행에 플레이어가 선택한 키워드가 있는 경우
			/*
			if (M[i][0] == 1) { // 그 키워드가 왼쪽이라면 왼쪽 키워드에 []표시, ---- 잠정 중단 ----

			if (S.Textlines[i].element == 8) {
			printf(" [PLATFORM]"); // 총 텍스트 11개(공백포함)
			}
			if (S.Textlines[i].element == -1) {
			printf(" [STAR]    ");
			}
			printf("     IS     ");

			if (S.Textlines[i].keyword == -100) { // a는 STOP
			printf(" STOP ");
			}
			if (S.Textlines[i].keyword == -101) { // b는 PASS
			printf(" PASS ");
			}
			if (S.Textlines[i].keyword == -102) { // c는 FALL
			printf(" FALL ");
			}

			}
			*/


			if (M[i][1] == 1) {// 그 키워드가 오른쪽이라면 오른쪽 키워드에 []표시
				if (S.Textlines[i].element == 8) {
					printf("  PLATFORM  ");
				}
				if (S.Textlines[i].element == -1) {
					printf("  STAR      ");
				}
				if (S.Textlines[i].element == 7) {
					printf("  CHARACTER ");
				}
				if (S.Textlines[i].element == 10) {
					printf("  MACHINE   ");
				}
				printf("     IS     ");
				if (S.Textlines[i].keyword == -100) { // a는 STOP
					printf("[STOP]");
				}
				if (S.Textlines[i].keyword == -101) { // b는 PASS
					printf("[PASS]");
				}
				if (S.Textlines[i].keyword == -102) { // c는 FALL
					printf("[FALL]");
				}
				if (S.Textlines[i].keyword == -103) { // d는 FALL
					printf("[SWITCH]");
				}
				if (S.Textlines[i].keyword == -104) { // c는 FALL
					printf("[FLOAT]");
				}
				if (S.Textlines[i].keyword == -105) { // c는 FALL
					printf("[PUSH]");
				}
				if (S.Textlines[i].keyword == 7) { // 3스테 캐릭 is 캐릭전용(처음에만 적용되는 것, 따로 키워드 습득으로 둘 예정X)
					printf("[CHARACTER]");
				}
			}
		}
		else { // 대상 행을 선택하지 않은 경우는 []없이 출력
			if (S.Textlines[i].element == 8) {
				printf("  PLATFORM  ");
			}
			if (S.Textlines[i].element == -1) {
				printf("  STAR      ");
			}
			if (S.Textlines[i].element == 7) {
				printf("  CHARACTER ");
			}
			if (S.Textlines[i].element == 10) {
				printf("  MACHINE   ");
			}
			printf("     IS     ");
			if (S.Textlines[i].keyword == -100) { // a는 STOP
				printf(" STOP ");
			}
			if (S.Textlines[i].keyword == -101) { // b는 PASS
				printf(" PASS ");
			}
			if (S.Textlines[i].keyword == -102) { // c는 FALL
				printf(" FALL ");
			}
			if (S.Textlines[i].keyword == -103) {
				printf(" SWITCH ");
			}
			if (S.Textlines[i].keyword == -104) {
				printf(" FLOAT ");
			}
			if (S.Textlines[i].keyword == -105) {
				printf(" PUSH ");
			}
			if (S.Textlines[i].keyword == 7) { // 3스테 캐릭 is 캐릭전용(처음에만 적용되는 것, 따로 키워드 습득으로 둘 예정X)
				printf(" CHARACTER ");
			}
		}

	}
}

void findTextlineSelection(Stage S, int M[][2], int* x, int* y) { // 위의 정보를 순회하여 현재 커서 위치 획득

	for (int i = 0; i < S.NumofLines; i++) { // 현재 어떤 부분을 가리키는지 획득
		for (int j = 0; j < 2; j++) {
			if (M[i][j] == 1) {
				*y = i, * x = j;
			}
		}
	}

	return;
}

void SwitchSolid(Stage S, int a, int n) { // 코드 a의 isSolid를 바꿔 통과 가능하게, 혹은 불가능하게 하는 함수
	// n에 0이 입력되면 통과 가능, 1이 입력되면 불가능
	for (int i = 0; i < 60; i++) {
		for (int j = 0; j < 40; j++) {
			if (S.stageinfo[i][j].n3 == a) { // a에 해당하는 픽셀들에 적용
				S.stageinfo[i][j].isSolid = n;

			}
		}
	}
}

// ------------------------------------------------ 아이템 관련


void initItems() {

	items[0].itemname = 'A';
	items[1].itemname = 'B';
	items[2].itemname = 'C';
	items[3].itemname = 'D';
	items[4].itemname = 'E';

	for (int i = 0; i < 10; i++) {
		items[i].quantity = 0;
	}
}

void indicateItems() {


	for (int i = 0; i < 3; i++) {
		setCursorPosition(90, 16 + i * 6);
		if (items[i].itemname == 'A') {
			textcolor(12);
			printf("+♥");
			textcolor(15);
		}
		else if (items[i].itemname == 'B') {
			textcolor(11);
			printf("+↕");
			textcolor(15);
		}
		else if (items[i].itemname == 'C') {
			textcolor(6);
			printf("+↔");
			textcolor(15);
		}
		else if (items[i].itemname == 'D') {
			printf("D");
		}
		else if (items[i].itemname == 'E') {
			printf("E");
		}
		printf(" X %d", items[i].quantity);
	}
}


// ------------------------------------------------ 시간 관련
void print_remaining_time(int elapsed_time)
{
	setCursorPosition(90, 50);
	printf("LAUNCHING TIME : %d", elapsed_time);
}

void time_check() {

	clock_t current_time = clock();
	double elapsed_time = (double)(current_time - start_time) / CLOCKS_PER_SEC;

	if ((int)(elapsed_time) != (int)(pre_time))
	{
		pre_time = elapsed_time;
		c_time++;
		//print_remaining_time(elapsed_time);
	}
}

void play_effect_sound(const char* sound_file) {
	// 멀티바이트 문자열을 유니코드로 변환
	wchar_t wide_sound_file[MAX_PATH];
	MultiByteToWideChar(CP_ACP, 0, sound_file, -1, wide_sound_file, MAX_PATH);

	PlaySound(wide_sound_file, NULL, SND_FILENAME | SND_ASYNC);
}

